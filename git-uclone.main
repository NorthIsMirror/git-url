# -*- mode: shell-script -*-
# vim:ft=sh

ARGUMENTS=( "$@" )
INPUT2="${ARGUMENTS[${#ARGUMENTS[@]}-1]}"
if [[ ${#ARGUMENTS[@]} -ge 2 ]]; then
    INPUT1="${ARGUMENTS[${#ARGUMENTS[@]}-2]}"
    if [[ "$INPUT1" != //* && "$INPUT1" != gitu://* ]]; then
        INPUT1="$INPUT2"
        DIRECTORY=""
        unset 'ARGUMENTS[${#ARGUMENTS[@]}-1]'
    else
        DIRECTORY="$INPUT2"
        unset 'ARGUMENTS[${#ARGUMENTS[@]}-1]'
        unset 'ARGUMENTS[${#ARGUMENTS[@]}-1]'
    fi
else
    INPUT1="$INPUT2"
    unset 'ARGUMENTS[${#ARGUMENTS[@]}-1]'
fi

INPUT1="${INPUT1#gitu://}"
INPUT1="${INPUT1#//}"
REGEX='^[0-9a-zA-ZµºÀ-ÖØ-áãäæ-öøú-ÿĀ-ƔƖ-ơƤ-ǃǍ-Ǳǳ-ǵǷ-Ɉɋ-ɏḀ-ẝẟ-ỹỻͻ-ͽΆΈΑ-ΡΣ-ΩΫ-ψϋ-ώϐ-ϒϔ-Ϡϥϧ-ϩϫ-ϲϵϷ-Ϲϻ-ϿЀ-џѡ-ѣѥѫѱ-ѳѵѷѻѽѿ-ҁҋ-ҟҡ-ҥҩ-ҳҵ-һӀ-ӌӎӐ-ӿא-דטך-מס-פ]+$'

# Input given?
if [[ -z "$INPUT1" ]]; then
    echo "Please provide gitu://... URL (see git uclone -h for help)."
    exit 1
fi

# Proper input?
if [[ ! "$INPUT1" =~ $REGEX ]]; then
    echo "Please provide gitu://... (or //... or just ... part) URL as last argument,"
    echo "it should consist only from unicode letters. If last argument is the target"
    echo "directory, then prefix gitu:// or // is required. See git uclone -h for help."
    exit 1
fi

# Select backend
declare TOOL
choose_tool
TOOL="$REPLY"

DATA=`"$TOOL" -qnd "$INPUT1" 2>/dev/null`

# Read repository fetch URL
declare URL="${DATA%% /  *}"

# Read current revision
declare REF="${DATA##* /  rev:}"
REF="${REF%% /  *}"

# Read encoded path
declare MYPATH="${DATA##* /  file:}"

echo -en "${YELLOW}Cloning URL ${MAGENTA}${URL}"
[[ -n "$REF" ]] && echo -en "${YELLOW} for revision ${GREEN}${REF}"
[[ -n "$MYPATH" ]] && echo -en "${YELLOW} with pointed file(s) ${GREEN}${MYPATH}"
echo -e ${RESET}

if ! git clone "${ARGUMENTS[@]}" "${URL}" ${DIRECTORY:+"$DIRECTORY"}; then
    echo -e "${YELLOW}Clone failed, error message is above, not proceeding further."
    exit 1
fi

if [[ -n "$REF" ]]; then
    if [[ -z "$DIRECTORY" ]]; then
        DIRECTORY="${URL##*/}"
        DIRECTORY="${DIRECTORY%.git}"
    fi

    echo -e "${YELLOW}Checking out revision/reference ${GREEN}${REF}${YELLOW}...${RESET}"
    cd "$DIRECTORY"
    git checkout -q --progress "$REF"
    get_ref
    echo -e "HEAD is now at: ${RED}${REPLY}${RESET}"
fi
